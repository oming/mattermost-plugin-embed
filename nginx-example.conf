map $target_url $target_domain {
    ~^https://(?<domain>[^/]+) $domain;
}

server {
    listen 8088 ssl;
    server_name _;


    # ssl on;                                               #ssl사용
    ssl_certificate /etc/nginx/ssl/jaehunpark-ssl.crt;        #생성된 인증서경로
    ssl_certificate_key /etc/nginx/ssl/jaehunpark-ssl.key;    #생성된 개인키
    # ssl_session_cache shared:SSL:1m;
    # ssl_session_timeout  10m;
    # ssl_ciphers PROFILE=SYSTEM;
    # ssl_prefer_server_ciphers on;

    # Tune buffer
    proxy_buffer_size        64k;
    proxy_buffers            4 128k;
    proxy_busy_buffers_size  128k;

    # Replace cookie domain
    # proxy_cookie_domain  google.com  $host;

    # Hide some upstream headers to avoid duplicates/overrideing
    proxy_hide_header  Strict-Transport-Security;
    proxy_hide_header  Content-Security-Policy;
    proxy_hide_header  X-Frame-Options;
    proxy_hide_header  X-XSS-Protection;
    proxy_hide_header  X-Content-Type-Options;
    proxy_hide_header  Referrer-Policy;

    # Substitute links in contents
    # NOTE: Require to set Accept-Encoding="" header in order to request
    #       *uncompressed* data from upstream, otherwise won't work!
    # sub_filter_types  text/css text/javascript application/json;
    # sub_filter_once   off;
    # sub_filter  //www.google.com/                  //$host/;
    # sub_filter  //apis.google.com/                 //$host/__gapis/;
    # sub_filter  //ajax.googleapis.com/             //$host/__gajax/;
    # sub_filter  //fonts.googleapis.com/            //$host/__gfonts/;
    # sub_filter  //www.gstatic.com/                 //$host/__gstatic/www/;
    # sub_filter  //ssl.gstatic.com/                 //$host/__gstatic/ssl/;
    # sub_filter  //encrypted-tbn0.gstatic.com/      //$host/__gstatic/enc-tbn0/;
    #             # Google Images
    # sub_filter  //webcache.googleusercontent.com/  //$host/__gwebcache/;

    #
    # Reverse proxy to Google search and its friends :-)
    #
    location /proxy {



        # 추출된 백엔드 URL을 $backend_url 변수에 저장
        # if ($args ~* "^origin=?(.*)$") {
        #     set $backend_url $1;
        # }



        # 백엔드 URL이 없을 경우 400 Bad Request 반환
        # if ($backend_url = "") {
        #     return 400;
        # }



        # rewrite ^/proxy(.*)$ $backend_url$1 break;

        # add_header Content-Type text/html;
        # return 200 "Variables: $backend_url";

        resolver 8.8.8.8; # Google의 DNS 서버를 사용하거나 원하는 DNS 서버를 설정합니다.

        set $target_url $arg_url;

        proxy_ssl_server_name on;
        proxy_pass $target_url;

        #   add_header Content-Type text/html;
        # return 200 "Variables: $arg_url";
        # return 200 "Variables: $target_url";
        # return 200 "Variables: $target_domain";
        add_header "TARGET_URL" $target_url;
        add_header "TARGET_DOMAIN" $target_domain;


        proxy_http_version 1.1;
        # proxy_pass $backend_url;

        # proxy_pass  https://www.google.com;

        # These header need set explicitly, otherwise the browser will
        # be redirected to Google's URL without proxy...
        # proxy_set_header  Host     www.google.com;
        # proxy_set_header  Referer  https://www.google.com;
        proxy_set_header  Host     $target_domain;
        proxy_set_header  Referer  $target_url;
        # Set other necessary headers
        # NOTE: Set Accept-Encoding="" to request *uncompressed* data
        #       from upstream, otherwise "sub_filter" doesn't work!
        # Credit: https://stackoverflow.com/a/36274259
        proxy_set_header  User-Agent         $http_user_agent;
        proxy_set_header  X-Real-IP          $remote_addr;
        proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto  $scheme;
        # proxy_set_header  Cookie             "";
        proxy_set_header  Accept-Language $http_accept_language;
        proxy_set_header  Accept-Encoding    "";

        #  sub_filter_types  text/css text/javascript application/json;
        sub_filter $target_domain localhost:8088/proxy?url=$target_url;
        sub_filter_once off;
    }

}
